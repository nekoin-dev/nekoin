#pragma version 5

// Nekoin NFT Transaction 3-way Payment LogicSig

// This logic sig will hold an NFT in escrow placed by the seller of the NFT. Anyone can claim the NFT if they provide
// the proper payment transactions. This logic sig specifically expects the payment to go to 3 addresses. For example,
// TMPL_SELLER_ADDR is the Algorand wallet address of the seller, TMPL_PAY_RECV2_ADDR could be the address of a charity,
// and TMPL_PAY_RECV3_ADDR could be the marketplace platform fee address.

// This logic sig has several functionalities:
//   1. sell: opt's the escrow account into holding the NFT and transfers the NFT from the seller to the escrow. Can
//      only be executed by the seller.
//   2. withdraw: transfers the NFT from the escrow account back to the seller. Can only be executed by the seller.
//   3. buy: opt's the buyer into holding the NFT, transfers the NFT from the escrow to the buyer, and pays ALGO
//      from the buyer to the seller and specified receivers. Can be executed by anyone as long as they provide the
//      appropriate payments.

// Validate that the template variables are set correctly. AssetID and all 3 receiver addresses must be non-zero.
int TMPL_ASSET_ID
int 0
>
assert
addr TMPL_SELLER_ADDR
global ZeroAddress
!=
assert
addr TMPL_PAY_RECV2_ADDR
global ZeroAddress
!=
assert
addr TMPL_PAY_RECV3_ADDR
global ZeroAddress
!=
assert

// This logic sig expects a group transaction of either 2 (withdraw), 3 (sell), or 6 (buy) transactions. If it is not
// one of these three sizes, then it will be automatically rejected.
// Validate the first two transactions: assetCloseTo, closeRemainderTo, and rekeyTo must not be set. Fees must be
// reasonable. If there are only two transactions, branch to withdraw.
global GroupSize
int 2
>=
assert
gtxn 0 AssetCloseTo
global ZeroAddress
==
assert
gtxn 0 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 0 RekeyTo
global ZeroAddress
==
assert
gtxn 0 Fee
int 2000
<=
assert
gtxn 1 AssetCloseTo
global ZeroAddress
==
assert
gtxn 1 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 1 RekeyTo
global ZeroAddress
==
assert
gtxn 1 Fee
int 2000
<=
assert
global GroupSize
int 2
==
bnz withdraw

// Validate the third transaction: assetCloseTo, closeRemainderTo, and rekeyTo must not be set. Fees must be reasonable.
// If there are only two transactions, branch to sell.
gtxn 2 AssetCloseTo
global ZeroAddress
==
assert
gtxn 2 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 2 RekeyTo
global ZeroAddress
==
gtxn 2 Fee
int 2000
<=
assert
global GroupSize
int 3
==
bnz sell

// These must be exactly six transactions and this is a buy transaction. Validate the fourth, fith, sixth transaction:
// assetCloseTo, closeRemainderTo, and rekeyTo must not be set. Fees must be reasonable.
global GroupSize
int 6
==
assert
gtxn 3 AssetCloseTo
global ZeroAddress
==
assert
gtxn 3 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 3 RekeyTo
global ZeroAddress
==
assert
gtxn 3 Fee
int 2000
<=
assert
gtxn 4 AssetCloseTo
global ZeroAddress
==
assert
gtxn 4 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 4 RekeyTo
global ZeroAddress
==
assert
gtxn 4 Fee
int 2000
<=
assert
gtxn 5 AssetCloseTo
global ZeroAddress
==
assert
gtxn 5 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 5 RekeyTo
global ZeroAddress
==
assert
gtxn 5 Fee
int 2000
<=
assert
b buy


// Withdraw transfers the NFT held by the escrow account back to the seller. The seller must cover the gas fees for the
// contract account.
withdraw:
// Gtxn[0]: asset transfer of the NFT from the escrow account to the seller.
gtxn 0 TypeEnum
int axfer
==
gtxn 0 XferAsset
int TMPL_ASSET_ID
==
&&
gtxn 0 AssetReceiver
addr TMPL_SELLER_ADDR
==
&&
// Gtxn[1]: ALGO payment from the seller to the escrow account, with amount matching the fee required for gtxn 0.
gtxn 1 TypeEnum
int pay
==
&&
gtxn 1 Receiver
gtxn 0 Sender
==
&&
gtxn 1 Amount
gtxn 0 Fee
==
&&
gtxn 1 Sender
addr TMPL_SELLER_ADDR
==
&&
return


// Sell opt's the escrow account into holding the NFT and send the NFT from seller to escrow account.
sell:
// Gtxn[0]: asset transfer of zero from and to the escrow address to opt-in to the ASA.
gtxn 0 TypeEnum
int axfer
==
gtxn 0 XferAsset
int TMPL_ASSET_ID
==
&&
gtxn 0 AssetAmount
int 0
==
&&
gtxn 0 Sender
gtxn 0 AssetReceiver
==
&&
// Gtxn[1]: asset transfer of the ASA from the seller to the contract address.
gtxn 1 TypeEnum
int axfer
==
&&
gtxn 1 XferAsset
int TMPL_ASSET_ID
==
&&
gtxn 1 Sender
addr TMPL_SELLER_ADDR
==
&&
gtxn 1 AssetReceiver
gtxn 0 AssetReceiver
==
&&
// Gtxn[2]: payment transfer from the seller to the contract address to cover the fees of gtxn 0.
gtxn 2 TypeEnum
int pay
==
&&
gtxn 2 Amount
gtxn 0 Fee
==
&&
gtxn 2 Sender
addr TMPL_SELLER_ADDR
==
&&
gtxn 2 Receiver
gtxn 0 Sender
==
&&
return


// Buy opt's the buyer into holding the NFT, transfers the NFT from the escrow account to the buyer, pays ALGO from the
// buyer to TMPL_SELLER_ADDR, TMPL_PAY_RECV2_ADDR, and TMPL_PAY_RECV3_ADDR, and pays ALGO from the buyer to the escrow
// acount to cover the fee of the NFT transfer.
buy:
// Gtxn[0]: Buyer opting into NFT. Asset transfer transaction from buyer to self with 0 amount.
gtxn 0 TypeEnum
int axfer
==
gtxn 0 XferAsset
int TMPL_ASSET_ID
==
&&
gtxn 0 AssetAmount
int 0
==
&&
gtxn 0 Sender
gtxn 0 AssetReceiver
==
&&
// Gtxn[1]: asset transfer of NFT from contract account to buyer
gtxn 1 TypeEnum
int axfer
==
&&
gtxn 1 XferAsset
int TMPL_ASSET_ID
==
&&
gtxn 1 AssetAmount
int 1
==
&&
gtxn 1 Sender
gtxn 5 Receiver
==
&&
gtxn 1 AssetReceiver
gtxn 2 Sender
==
&&
gtxn 1 AssetReceiver
gtxn 3 Sender
==
&&
gtxn 1 AssetReceiver
gtxn 4 Sender
==
&&
gtxn 1 AssetReceiver
gtxn 5 Sender
==
&&
// Gtxn[2]: payment from buyer to seller with the expected amount of ALGO
gtxn 2 TypeEnum
int pay
==
&&
gtxn 2 Receiver
addr TMPL_SELLER_ADDR
==
&&
gtxn 2 Amount
int TMPL_PAYMENT_SELLER_AMOUNT
==
&&
// Gtxn[3]: payment from buyer to receiver 2 with the expected amount of ALGO
gtxn 3 TypeEnum
int pay
==
&&
gtxn 3 Receiver
addr TMPL_PAY_RECV2_ADDR
==
&&
gtxn 3 Amount
int TMPL_PAYMENT_RECV2_AMOUNT
==
&&
// Gtxn[4]: payment from buyer to receiver 3 with the expected amount of ALGO
gtxn 4 TypeEnum
int pay
==
&&
gtxn 4 Receiver
addr TMPL_PAY_RECV3_ADDR
==
&&
gtxn 4 Amount
int TMPL_PAYMENT_RECV3_AMOUNT
==
&&
// Gtxn[5]: payment transfer from the buyer to the contract address to cover the fees of gtxn 1.
gtxn 5 TypeEnum
int pay
==
&&
gtxn 5 Amount
gtxn 1 Fee
==
&&
gtxn 5 Receiver
gtxn 1 Sender
==
&&
return
